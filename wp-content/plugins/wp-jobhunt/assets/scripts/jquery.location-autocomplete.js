jQuery(document).ready(function (jQuery) {
"use strict";
        jQuery.fn.extend({
        cityAutocomplete: function (options) {

        return this.each(function () {

        var input = jQuery(this), opts = jQuery.extend({}, jQuery.cityAutocomplete);
                var autocompleteService = new google.maps.places.AutocompleteService();
                var predictionsDropDown = jQuery('<div class="cs_location_autocomplete" class="city-autocomplete"></div>').appendTo(jQuery(this).parent());
                var request_var = 1;
                input.keyup(function () {

                jQuery(this).parent(".cs_location_autocomplete").html("<i class='icon-spinner8 icon-spin'></i>");
                        if (request_var == 1) {
                var searchStr = jQuery(this).val();
                        // Min Number of characters
                        var num_of_chars = 0;
                        if (searchStr.length > num_of_chars) {
                var params = {
                input: searchStr,
                        bouns: 'upperbound',
                        //types: ['address']
                };
                        params.componentRestrictions = ''; //{country: window.country_code}

                        autocompleteService.getPlacePredictions(params, updatePredictions);
                }
                }
                });
                predictionsDropDown.delegate('div', 'click', function () {
                if (jQuery(this).text() != "ADDRESS" && jQuery(this).text() != "STATE / PROVINCE" && jQuery(this).text() != "COUNTRY") {
                // address with slug			
                var cs_address_html = jQuery(this).text();
                        // slug only
                        var cs_address_slug = jQuery(this).find('span').html();
                        // remove slug
                        jQuery(this).find('span').remove();
                        input.val(jQuery(this).text());
                        input.next('.search_keyword').val(cs_address_slug);
                        predictionsDropDown.hide();
                        input.next('.search_keyword').closest("form.side-loc-srch-form").submit();
                }
                });
                jQuery(document).mouseup(function (e) {
        predictionsDropDown.hide();
        });
                jQuery(window).resize(function () {
        updatePredictionsDropDownDisplay(predictionsDropDown, input);
        });
                updatePredictionsDropDownDisplay(predictionsDropDown, input);
                function updatePredictions(predictions, status) {

                var google_results = '';
                        if (google.maps.places.PlacesServiceStatus.OK == status) {

                // AJAX GET ADDRESS FROM GOOGLE
                google_results += '<div class="address_headers"><h5>ADDRESS</h5></div>';
                        jQuery.each(predictions, function (i, prediction) {
                        google_results += '<div class="cs_google_suggestions"><i class="icon-location-arrow"></i> ' + jQuery.fn.cityAutocomplete.transliterate(prediction.description) + '<span style="display:none">' + jQuery.fn.cityAutocomplete.transliterate(prediction.description) + '</span></div>';
                        });
                        request_var = 0;
                } else {
                predictionsDropDown.empty();
                }
                // AJAX GET STATE / PROVINCE
                var dataString = 'action=cs_get_all_countries_cities' + '&keyword=' + jQuery('.cs_search_location_field').val();
                        var plugin_url = input.parent(".cs_searchbox_div").data('locationadminurl');
                        jQuery.ajax({
                        type: "POST",
                                url: plugin_url,
                                data: dataString,
                                success: function (data) {
                                var results = jQuery.parseJSON(data);
                                        predictionsDropDown.empty();
                                        predictionsDropDown.append(google_results);
                                        if (results != '') {

                                predictionsDropDown.append('<div class="address_headers"><h5>COUNTRY / CITY</h5></div>');
                                        jQuery(results).each(function (key, value) {
                                if (value.hasOwnProperty('child')) {
                                jQuery(value.child).each(function (child_key, child_value) {
                                predictionsDropDown.append('<div class="cs_location_child">' + child_value.value + '<span style="display:none">' + child_value.slug + '</span></div');
                                })
                                } else {
                                predictionsDropDown.append('<div class="cs_location_parent">' + value.value + '<span style="display:none">' + value.slug + '</span></div');
                                }
                                })
                                }
                                request_var = 1;
                                }
                        });
                        predictionsDropDown.show();
                }
        return input;
        });
        }
        });
        jQuery.fn.cityAutocomplete.transliterate = function (s) {
        s = String(s);
                var char_map = {
                // Latin
                'Ã€': 'A', 'Ã?': 'A', 'Ã‚': 'A', 'Ãƒ': 'A', 'Ã„': 'A', 'Ã…': 'A', 'Ã†': 'AE', 'Ã‡': 'C',
                        'Ãˆ': 'E', 'Ã‰': 'E', 'ÃŠ': 'E', 'Ã‹': 'E', 'ÃŒ': 'I', 'Ã?': 'I', 'ÃŽ': 'I', 'Ã?': 'I',
                        'Ã?': 'D', 'Ã‘': 'N', 'Ã’': 'O', 'Ã“': 'O', 'Ã”': 'O', 'Ã•': 'O', 'Ã–': 'O', 'Å?': 'O',
                        'Ã˜': 'O', 'Ã™': 'U', 'Ãš': 'U', 'Ã›': 'U', 'Ãœ': 'U', 'Å°': 'U', 'Ã?': 'Y', 'Ãž': 'TH',
                        'ÃŸ': 'ss',
                        'Ã ': 'a', 'Ã¡': 'a', 'Ã¢': 'a', 'Ã£': 'a', 'Ã¤': 'a', 'Ã¥': 'a', 'Ã¦': 'ae', 'Ã§': 'c',
                        'Ã¨': 'e', 'Ã©': 'e', 'Ãª': 'e', 'Ã«': 'e', 'Ã¬': 'i', 'Ã­': 'i', 'Ã®': 'i', 'Ã¯': 'i',
                        'Ã°': 'd', 'Ã±': 'n', 'Ã²': 'o', 'Ã³': 'o', 'Ã´': 'o', 'Ãµ': 'o', 'Ã¶': 'o', 'Å‘': 'o',
                        'Ã¸': 'o', 'Ã¹': 'u', 'Ãº': 'u', 'Ã»': 'u', 'Ã¼': 'u', 'Å±': 'u', 'Ã½': 'y', 'Ã¾': 'th',
                        'Ã¿': 'y',
                        // Latin symbols
                        'Â©': '(c)',
                        // Greek
                        'Î‘': 'A', 'Î’': 'B', 'Î“': 'G', 'Î”': 'D', 'Î•': 'E', 'Î–': 'Z', 'Î—': 'H', 'Î˜': '8',
                        'Î™': 'I', 'Îš': 'K', 'Î›': 'L', 'Îœ': 'M', 'Î?': 'N', 'Îž': '3', 'ÎŸ': 'O', 'Î ': 'P',
                        'Î¡': 'R', 'Î£': 'S', 'Î¤': 'T', 'Î¥': 'Y', 'Î¦': 'F', 'Î§': 'X', 'Î¨': 'PS', 'Î©': 'W',
                        'Î†': 'A', 'Îˆ': 'E', 'ÎŠ': 'I', 'ÎŒ': 'O', 'ÎŽ': 'Y', 'Î‰': 'H', 'Î?': 'W', 'Îª': 'I',
                        'Î«': 'Y',
                        'Î±': 'a', 'Î²': 'b', 'Î³': 'g', 'Î´': 'd', 'Îµ': 'e', 'Î¶': 'z', 'Î·': 'h', 'Î¸': '8',
                        'Î¹': 'i', 'Îº': 'k', 'Î»': 'l', 'Î¼': 'm', 'Î½': 'n', 'Î¾': '3', 'Î¿': 'o', 'Ï€': 'p',
                        'Ï?': 'r', 'Ïƒ': 's', 'Ï„': 't', 'Ï…': 'y', 'Ï†': 'f', 'Ï‡': 'x', 'Ïˆ': 'ps', 'Ï‰': 'w',
                        'Î¬': 'a', 'Î­': 'e', 'Î¯': 'i', 'ÏŒ': 'o', 'Ï?': 'y', 'Î®': 'h', 'ÏŽ': 'w', 'Ï‚': 's',
                        'ÏŠ': 'i', 'Î°': 'y', 'Ï‹': 'y', 'Î?': 'i',
                        // Turkish
                        'Åž': 'S', 'Ä°': 'I', 'Ã‡': 'C', 'Ãœ': 'U', 'Ã–': 'O', 'Äž': 'G',
                        'ÅŸ': 's', 'Ä±': 'i', 'Ã§': 'c', 'Ã¼': 'u', 'Ã¶': 'o', 'ÄŸ': 'g',
                        // Russian
                        'Ð?': 'A', 'Ð‘': 'B', 'Ð’': 'V', 'Ð“': 'G', 'Ð”': 'D', 'Ð•': 'E', 'Ð?': 'Yo', 'Ð–': 'Zh',
                        'Ð—': 'Z', 'Ð˜': 'I', 'Ð™': 'J', 'Ðš': 'K', 'Ð›': 'L', 'Ðœ': 'M', 'Ð?': 'N', 'Ðž': 'O',
                        'ÐŸ': 'P', 'Ð ': 'R', 'Ð¡': 'S', 'Ð¢': 'T', 'Ð£': 'U', 'Ð¤': 'F', 'Ð¥': 'H', 'Ð¦': 'C',
                        'Ð§': 'Ch', 'Ð¨': 'Sh', 'Ð©': 'Sh', 'Ðª': '', 'Ð«': 'Y', 'Ð¬': '', 'Ð­': 'E', 'Ð®': 'Yu',
                        'Ð¯': 'Ya',
                        'Ð°': 'a', 'Ð±': 'b', 'Ð²': 'v', 'Ð³': 'g', 'Ð´': 'd', 'Ðµ': 'e', 'Ñ‘': 'yo', 'Ð¶': 'zh',
                        'Ð·': 'z', 'Ð¸': 'i', 'Ð¹': 'j', 'Ðº': 'k', 'Ð»': 'l', 'Ð¼': 'm', 'Ð½': 'n', 'Ð¾': 'o',
                        'Ð¿': 'p', 'Ñ€': 'r', 'Ñ?': 's', 'Ñ‚': 't', 'Ñƒ': 'u', 'Ñ„': 'f', 'Ñ…': 'h', 'Ñ†': 'c',
                        'Ñ‡': 'ch', 'Ñˆ': 'sh', 'Ñ‰': 'sh', 'ÑŠ': '', 'Ñ‹': 'y', 'ÑŒ': '', 'Ñ?': 'e', 'ÑŽ': 'yu',
                        'Ñ?': 'ya',
                        // Ukrainian
                        'Ð„'
                        : 'Ye', 'Ð†': 'I', 'Ð‡': 'Yi', 'Ò?': 'G',
                        'Ñ”'
                        : 'ye', 'Ñ–': 'i', 'Ñ—': 'yi', 'Ò‘': 'g',
                        // Czech
                        'ÄŒ'
                        : 'C', 'ÄŽ': 'D', 'Äš': 'E', 'Å‡': 'N', 'Å˜': 'R', 'Å ': 'S', 'Å¤': 'T', 'Å®': 'U',
                        'Å½'
                        : 'Z',
                        'Ä?'
                        : 'c', 'Ä?': 'd', 'Ä›': 'e', 'Åˆ': 'n', 'Å™': 'r', 'Å¡': 's', 'Å¥': 't', 'Å¯': 'u',
                        'Å¾'
                        : 'z',
                        // Polish
                        'Ä„'
                        : 'A', 'Ä†': 'C', 'Ä˜': 'e', 'Å?': 'L', 'Åƒ': 'N', 'Ã“': 'o', 'Åš': 'S', 'Å¹': 'Z',
                        'Å»'
                        : 'Z',
                        'Ä…'
                        : 'a', 'Ä‡': 'c', 'Ä™': 'e', 'Å‚': 'l', 'Å„': 'n', 'Ã³': 'o', 'Å›': 's', 'Åº': 'z',
                        'Å¼'
                        : 'z',
                        // Latvian
                        'Ä€'
                        : 'A', 'ÄŒ': 'C', 'Ä’': 'E', 'Ä¢': 'G', 'Äª': 'i', 'Ä¶': 'k', 'Ä»': 'L', 'Å…': 'N',
                        'Å '
                        : 'S', 'Åª': 'u', 'Å½': 'Z',
                        'Ä?'
                        : 'a', 'Ä?': 'c', 'Ä“': 'e', 'Ä£': 'g', 'Ä«': 'i', 'Ä·': 'k', 'Ä¼': 'l', 'Å†': 'n',
                        'Å¡'
                        : 's', 'Å«': 'u', 'Å¾': 'z'
                };
                jQuery.each(char_map, function(chars, normalized){
                var regex = new RegExp('[' + chars + ']', 'gi');
                        s = s.replace(regex, normalized);
                });
                return s;
                };
        function updatePredictionsDropDownDisplay(dropDown, input) {
        if (typeof (input.offset()) !== 'undefined') {
        dropDown.css({
        'width': input.outerWidth(),
                'left': input.offset().left,
                'top': input.offset().top + input.outerHeight()
        });
        }
        }

jQuery('input.cs_search_location_field').cityAutocomplete();
        jQuery(document).on('click', '.cs_searchbox_div', function () {
jQuery('.cs_search_location_field').prop('disabled', false);
        });
        jQuery(document).on('click', 'form', function () {
        var src_loc_val = jQuery(this).find('.cs_search_location_field');
        src_loc_val.next('.search_keyword').val(src_loc_val.val());
        var src_loc_country_val = jQuery(this).find('.cs_search_location_field_country');
        src_loc_country_val.next('.search_keyword_country').val(src_loc_country_val.val());
        var src_loc_city_val = jQuery(this).find('.cs_search_location_field_city');
        src_loc_city_val.next('.search_keyword_city').val(src_loc_city_val.val());
        var src_loc_address_val = jQuery(this).find('.cs_search_location_field_address');
        src_loc_address_val.next('.search_keyword_address').val(src_loc_address_val.val());
        });
        }(jQuery)
        );